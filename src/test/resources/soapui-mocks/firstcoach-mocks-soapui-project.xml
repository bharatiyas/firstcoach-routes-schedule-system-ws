<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="55c9e1fa-e8e4-4fbd-9d38-0f2bbc657d14" activeEnvironment="Default" name="firstcoach-mocks" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="a5424bb4-e035-489d-a98e-34310e94311e" wadlVersion="http://wadl.dev.java.net/2009/02" name="" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/><con:resource name="FetchRoutes" path="/fetchSchedules" id="ddf9de85-21f5-4307-b124-1b8905ab503a"><con:settings/><con:parameters/><con:method name="FetchRoutes 1" id="52f22a00-2e40-45e9-86d4-d8f97d793f04" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="Request 1" id="78b7a100-f144-4708-a18d-c751020d819e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9091</con:endpoint><con:request/><con:originalUri>http://localhost/fetchRoutes</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="FetchSchedule" id="2c464042-8212-4443-8ec8-719df6edd1af" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="09179e1b-3931-4aae-8550-140da7472a80" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:9092</con:endpoint><con:request>{}</con:request><con:originalUri>http://localhost/fetchSchedule</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="34350317-1634-4147-934b-2ede8b850f1b" port="9091" path="/" host="localhost" name="Routes MockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/fetchRoutes" method="GET" resourcePath="/fetchRoutes" id="b9403abe-1f6b-4c6d-8b5e-4cb6fca1572b"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="RoutesMockResponse" id="661603dc-4116-4766-9542-3e79bff57de4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
	{
		"departureLocationCode": "BEN-SG",
		"arrivalLocationCode": "KLG-MY"
	},
	{
		"departureLocationCode": "BEN-SG",
		"arrivalLocationCode": "BU-MY"
	},
	{
		"departureLocationCode": "BEN-SG",
		"arrivalLocationCode": "TAR-MY"
	}
]</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="4f8962b4-3f0d-419e-8dff-1ffa7489fe8b" port="9092" path="/" host="localhost" name="ScheduleMockService" docroot=""><con:settings/><con:properties/><con:restMockAction name="/fetchSchedules" method="POST" resourcePath="/fetchSchedules" id="3c0da338-cba0-4006-9269-4fab453924b7"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="ScheduleMockResponse" id="028d4f58-ab22-46de-bb81-37bc1cac1033" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ 
	"schedules": [ 
		{ 
			"departureDateTime": "2019-04-30T16:41:41.090Z", 
			"fromLocation": "BEN-SG", 
			"toLocation": "KLG-MY", 
			"availableSeats" : 50 
		}, 
		{ 
			"departureDateTime": "2019-04-30T18:41:41.090Z", 
			"fromLocation": "BEN-SG",
			"toLocation": "KLG-MY",
			"availableSeats" : 10 
		} 
	] 
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>