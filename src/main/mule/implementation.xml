<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<os:object-store name="Routes_Response_ObjectStore" doc:name="Object store" doc:id="838656ea-d808-486a-a125-fb5f0684838b" persistent="false" entryTtl="1" entryTtlUnit="DAYS" expirationIntervalUnit="DAYS" />
	<os:object-store name="Schedules_Response_Object_store" doc:name="Object store" doc:id="7ae9d9ee-7a2e-48d9-b1e0-10e3693ccac0" persistent="false" entryTtl="30" entryTtlUnit="MINUTES" expirationInterval="30" />
	<flow name="routesFlow" doc:id="eb9910ee-8fcd-4342-96c4-9892a2fed264" >
		<set-variable value="#[message.attributes.uriParams.transportType]" doc:name="Set transportType" doc:id="eb4e3658-fe62-4d45-a7a2-eb7acf1050e1" variableName="transportType"/>
		<os:retrieve doc:name="Retrieve From OS" doc:id="82dafb42-2092-4ad9-ba33-749a2365d482" key="#[vars.transportType]" objectStore="Routes_Response_ObjectStore">
			<os:default-value ><![CDATA[false]]></os:default-value>
		</os:retrieve>
		<choice doc:name="Choice" doc:id="0bfb8703-15af-48a4-9e12-5675927cbf7a" >
			<when expression='#[payload == "false"]'>
				<try doc:name="Try" doc:id="c3f806b5-4a96-491e-8524-06cfb4915263" >
					<http:request method="GET" doc:name="Call FirstCoach Routes API" doc:id="3ec2148b-5140-4ed7-90d0-e6a6c8151fc4" config-ref="FirstCoach_Routes_HTTP_Req_Conf" path="/fetchRoutes" />
					<error-handler >
						<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="1e000c1f-e3b1-4df0-9196-6d6ced33b3b6" >
							<ee:transform doc:name="Set Payload" doc:id="1ca82ceb-7a5a-423f-94ad-ea1f0b855624" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": "Error encountered while calling third party API"
}]]></ee:set-payload>
								</ee:message>
							</ee:transform>
						</on-error-propagate>
					</error-handler>
				</try>
				<ee:transform doc:name="Prepare Response" doc:id="c58a85e4-759b-4064-9185-3b39b6b484d5" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload map ( payload01 , indexOfPayload01 ) -> {
	originLocation: {
		locationCode: payload01.departureLocationCode
	},
	destinationLocation: {
		locationCode: payload01.arrivalLocationCode
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<os:store doc:name="Store in OS" doc:id="cdf8150f-ce71-458d-a637-19c79590c912" key="#[vars.transportType]" objectStore="Routes_Response_ObjectStore"/>
				<logger level="INFO" doc:name="Logger" doc:id="a7d557f1-8613-40d9-8c38-aaa883db9d97" message='#["Data cached for transportType: " ++ vars.transportType]'/>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="a5514d16-3c19-49fa-8755-c6396e4c115f" message='#["Returning cached data for transportType: " ++ vars.transportType]'/>
			</otherwise>
		</choice>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="f764a74e-3592-4de2-84f9-9a4d8df4bb74" >
				<ee:transform doc:name="Set X-Event-Id" doc:id="304ac876-d4af-44e9-95fc-b2f5adae7c9b" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="outboundHeaders" ><![CDATA[%dw 2.0
output application/json
---
{
	"X-Event-Id": correlationId
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<ee:transform doc:name="Set Payload" doc:id="07053e41-e4a3-4235-92c7-1fc30bf7f8fb" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
if (payload.message != "Error encountered while calling third party API")
{
	"message": "Internal Server Error"
} else {
	"message": "Internal Server Error. Error encountered while calling third party API"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="scheduleFlow" doc:id="16de3174-0c08-4235-adcb-802186d00cb6" >
		<set-variable value="#[message.attributes.queryParams.departureLocationCode ++ message.attributes.queryParams.destinationLocationCode]" doc:name="Set object-store-key" doc:id="e56584b6-0c66-472d-9dc7-3d845c7af552" variableName="object-store-key"/>
		<try doc:name="Try" doc:id="698342ba-29ea-4310-b588-d00bdefe3ff4" >
			<ee:transform doc:name="Prepare Request" doc:id="eabaa61a-18e8-412f-8ee4-d624daae1db0">
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	departureLocationCode: message.attributes.queryParams.departureLocationCode,
	destinationLocationCode:  message.attributes.queryParams.destinationLocationCode
}]]></ee:set-payload>
				</ee:message>
				<ee:variables />
			</ee:transform>
			<http:request method="POST" doc:name="Call FirstCoach Schedules API" doc:id="c0e6e111-f5c1-489f-bfec-fc1e89095c86" config-ref="FirstCoach_Schedule_HTTP_Req_Conf" path="/fetchSchedules" />
			<ee:transform doc:name="Prepare Response" doc:id="e7cd5c45-da1f-47b8-a711-52b0cd45519e" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	departureSchedules: payload.schedules map ( schedule , indexOfSchedule ) -> {
		availableSeats: schedule.availableSeats,
		departureDateTime: schedule.departureDateTime,
		travelRoute: {
			destinationLocation: {
				locationCode: schedule.toLocation
			},
			originLocation: {
				locationCode: schedule.fromLocation
			}
		}
	}
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<os:store doc:name="Store in OS" doc:id="1c16ee54-03d2-4d23-a81d-5b9dcd0754ab" key='#[vars."object-store-key"]' objectStore="Schedules_Response_Object_store"/>
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="7ac10124-46d8-4a73-bba6-a64ea40a414c" when='#[error.errorType.namespace == "HTTP"]'>
					<logger level="ERROR" doc:name="Logger" doc:id="d4b61b78-ba02-45b1-af44-b2ccfa7b29f2" message="#[vars.errorCaught]" />
					<os:retrieve doc:name="Retrieve from OS" doc:id="18681397-502e-48fd-9daa-9a8a6ec7d051" key='#[vars."object-store-key"]' objectStore="Schedules_Response_Object_store">
						<os:default-value ><![CDATA[[]]]></os:default-value>
					</os:retrieve>
					<choice doc:name="Choice" doc:id="be2295b1-356d-43bc-bf0d-ebbca0b31e07" >
						<when expression='#[payload == "[]"]'>
							<raise-error doc:name="Raise error" doc:id="1fb5803e-0dca-4e67-a804-fefb1c52dda4" type="MULE:CONNECTIVITY" description="Rethrowing HTTP Connectivity Error"/>
						</when>
						<otherwise >
							<logger level="INFO" doc:name="Logger" doc:id="569b1a48-fbc7-43c8-820d-59f2a0554371" message='#["Returning cached data for Object Store Key: " ++ vars.object-store-key]'/>
						</otherwise>
					</choice>
				</on-error-continue>
			</error-handler>
		</try>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="71efc4f3-e1ae-4ef1-927f-41d049062cda" >
				<ee:transform doc:name="Set X-Event-Id" doc:id="3d832339-0155-42ae-b68e-a8f2160a96e4" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="outboundHeaders" ><![CDATA[%dw 2.0
output application/json
---
{
	"X-Event-Id": correlationId
}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<ee:transform doc:name="Set Payload" doc:id="1c37c489-0ff4-4a10-88e4-8bb40c79e477" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": "Internal Server Error"
} ]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
</mule>
